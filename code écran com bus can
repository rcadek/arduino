#include <SPI.h>
#include "mcp_can.h"
#include <genieArduino.h>
Genie genie;
#include <Wire.h>
#include "DS1307.h"
int heurea;
int minutea;
int seca;
int heureb;
int minuteb;
int secb;
int bp_cronostart;
int debut=0;
int totala;
int totalb;
const int BP3=3;
DS1307 clock;//define a object of DS1307 class
volatile boolean flag=false;
const int SPI_CS_PIN = 53;
String messagee;
String reception;
int tour;

MCP_CAN CAN(SPI_CS_PIN);


int baterie;
float Vmesure=0.1;
float CurrentValue=0.123;
int taille;
int i=0;
char detector;
int vitesse;

void setup() {

  
    pinMode(BP3,INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(BP3),macro_interrupt,FALLING);

    
    while (CAN_OK != CAN.begin(CAN_500KBPS))              // init can bus : baudrate = 500k
    {
        
        delay(100);
    }
    
    clock.begin();
    
    genie.Begin(Serial);
    genie.WriteContrast(15);
    Serial.begin(9600);
    
  

}

void loop() {
  
    genie.DoEvents();
  //chronometre:heure
  
if (bp_cronostart == 1 && debut==0)
      {
         printTimeset();
         debut=1;
        
         
         delay(100);
         bp_cronostart=0;
      }
if (debut==1)
      {
        printTime();

        
        calcultime();

        
        
        genie.WriteObject(GENIE_OBJ_LED_DIGITS, 5, minutea);
        genie.WriteObject(GENIE_OBJ_LED_DIGITS, 7, seca);
   
        
        if (bp_cronostart == 1)
              {
                debut=0;
                
                bp_cronostart=0;
               
              }
      }


      
      //Reception


      

    unsigned char len = 0;
    unsigned char buf[6];

    if(CAN_MSGAVAIL == CAN.checkReceive())            // check if data coming
    {
        CAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
        messagee="";
      

        for(int i = 0; i<len; i++)    // print the data
        {
            
            char character=(buf[i]);
            character=character-'O'+79;
           
            if (character != 'I' || character != 'U' || character !='T' || character !='V')
            {
            messagee=messagee+character;
            }
            
            
        }
        messagee.remove(0,1);
       
       
        
        
    } 
   
    detector=buf[0];
    detector=detector-'O'+79;
   
   if (detector=='I')
   {
    CurrentValue=messagee.toFloat();
    
     genie.WriteObject(GENIE_OBJ_LED_DIGITS, 2,  CurrentValue*10);
   }
   else if (detector=='U')
   {
 
    Vmesure=messagee.toFloat();
 
    baterie=(Vmesure*100)/52;
   
    genie.WriteObject(GENIE_OBJ_LED_DIGITS, 0,  baterie);
     genie.WriteObject(GENIE_OBJ_GAUGE, 0, baterie);
    genie.WriteObject(GENIE_OBJ_LED_DIGITS, 1,  Vmesure*10);
   }
   else if (detector=='T')
   {
    tour=messagee.toInt();
  
    genie.WriteObject(GENIE_OBJ_LED_DIGITS, 3, tour);
   }
   else if (detector=='V')
   {
    vitesse=messagee.toInt();
   
    genie.WriteObject(GENIE_OBJ_ANGULAR_METER , 0, vitesse);
   }
  
 

      
        
}


//macro
void printTimeset()
{
    clock.getTime();
    heureb=clock.hour;
    minuteb=clock.minute;
    secb=clock.second;
    totalb=heureb*3600+minuteb*60+secb;
}
void printTime()
{
    clock.getTime();
    heurea=clock.hour;
    minutea=clock.minute;
    seca=clock.second;
}
void calcultime()
{
  totala=heurea*3600+minutea*60+seca;
  secb=totala-totalb;
  seca=secb%60;
  minutea=(secb-seca)/60;
  heurea=0;
  
}
void macro_interrupt(void) //Prototype de la macro d'interruption
{
  bp_cronostart=1;
   //Ã©mission
   unsigned char stmp[1]={"U"};

    // send data:  id = 0x00, standard frame, data len = 6, stmp: data buf
    CAN.sendMsgBuf(0x70,0, 1, stmp);
    
    
                    
}
